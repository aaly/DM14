with io use *
with math use *

extern
#include <tesseract/baseapi.h>
#include <leptonica/allheaders.h>

#include <string>
#include <iostream>
endextern

main ( |argc| int; -> |xx| int;)
{


extern


using namespace std;

    char *outText;

    tesseract::TessBaseAPI *api = new tesseract::TessBaseAPI();
    // Initialize tesseract-ocr with English, without specifying tessdata path
    if (api->Init(NULL, "eng")) {
        fprintf(stderr, "Could not initialize tesseract.\n");
        exit(1);
    }

    // Open input image with leptonica library
    Pix *image = pixRead("testplate.jpg");
    api->SetImage(image);
    // Get OCR result

//	string result =  api->GetUTF8Text();

    outText = api->GetUTF8Text();
    printf("OCR output:\n%s %i", outText, strlen(outText));

	//cout << result.size() << " : " << result << endl;
    
    
    
	
	
	Boxa* boxes = api->GetComponentImages(tesseract::RIL_TEXTLINE, true, NULL, NULL);
	printf("Found %d textline image components.\n", boxes->n);
	for (int i = 0; i < boxes->n; i++)
	{
		BOX* box = boxaGetBox(boxes, i, L_CLONE);
		api->SetRectangle(box->x, box->y, box->w, box->h);
		char* ocrResult = api->GetUTF8Text();
		int conf = api->MeanTextConf();
		fprintf(stdout, "Box[%d]: x=%d, y=%d, w=%d, h=%d, confidence: %d, text: %s",
						i, box->x, box->y, box->w, box->h, conf, ocrResult);
	}
	
	
	// Destroy used object and release memory
    api->End();
    delete [] outText;
    pixDestroy(&image);

endextern

|ss|  int[1000000];

|xa|  int[1000000];

  
  for [|i| int =0;]
      [i < 25000;]
      [i++;]
  {
    xa[i] = Random();
  }
  
  
  for [|i| int =0;]
      [i < 25000;]
      [i++;]
  {
      for [|l| int =0;]
		  [l < 25000;]
		  [l++;]
	  {
	    if [xa[l] > xa[i]]
	    {
	      |tmp| int = xa[l];
	      xa[l] = xa[i];
	      xa[i] = tmp;
	    }
	  }
  }
	
	
for   [|i| int =0;]
      [i < 25000;]
      [i++;]
  {
    spill ("xa["); spill(i); spill("]="); nspill(xa[i]);
  }
  
  distribute;
  
  for [|i| int =25000;]
      [i < 50000;]
      [i++;]
  {
    xa[i] = Random();
  }


  for [|i| int =25000;]
      [i < 50000;]
      [i++;]
  {
      for [|k| int =25000;]
		  [k < 50000;]
		  [k++;]
	  {
	    if [xa[k] > xa[i]]
	    {
	      |tmp| int = xa[k];
	      xa[k] = xa[i];
	      xa[i] = tmp;
	    }
	  }
  }

for   [|i| int =25000;]
      [i < 50000;]
      [i++;]
  {
    spill ("xa["); spill(i); spill("]="); nspill(xa[i]);
  }
	  

}

