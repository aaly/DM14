~~ all variables outside main must be nodist by default ! or we get error at compiling

with io
with io      use File
with io      use string
with math
with core    use Sleep
with core    use common
with sys
with sys	 use time


processNodeInformation (distanceUpdateValue int; nodeID string;->);
monitorBoat (->);
findNodeIndex(nodeID string; -> nodeIndex int;);

struct nodeInfo
{
	nodeID	nodist string;
	distance	nodist float;	
	readValue	nodist float;
}

main (args string; -> result int;)
{
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~ Server level ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	nodesInfoSize nodist global int = 10000;
	nodesInfoCurrentSize nodist global int = 0;
	nodesInfo global nodeInfo[10000];
	
	localLastUpdate nodist global int;
	lastUpdate channel global int;
	
	
	nodeUpdateIndex channel global int;
	distanceUpdate channel global int;
	
	~~Distributed.checkTicks = 1000;
	~~nspill("done launching RPN tests");
	
	thread monitorBoat();
	
	~~~~~~~~~~~~~~~~~~~~~~~~
	
	while [true]
	{
		localDistanceUpdate nodist global int = distanceUpdate;
		distanceUpdateAddress nodist global string = @distanceUpdate;
		thread processNodeInformation(localDistanceUpdate, distanceUpdateAddress);
	}
}

processNodeInformation (distanceUpdateValue int; nodeID string;->)
{
	nodeindex nodist int = findNodeIndex(nodeID);
	if [ nodeindex != -1 ]
	{
		nodesInfo[nodeindex].readValue = distanceUpdate;
	}
	else
	{
		nodesInfo[nodesInfoCurrentSize].nodeID = nodeID;
		nodesInfo[nodesInfoCurrentSize].readValue = distanceUpdate;
		nodesInfoCurrentSize++;
	}
	
	displayInfo("average distance :"+ numberToStr((distanceUpdate + localLastUpdate) / 2));
}

monitorBoat(->)
{
	while [true]
	{
		Sleep(10);
	}
}

findNodeIndex(nodeID string; -> nodeIndex int;)
{
	for [i int = 0; i < nodesInfoSize; i++;]
	{
		if [nodesInfo[i].nodeID == nodeID]
		{
			return i;
		}
	}
	
	return -1;
}
